import React from 'react';
import Deck from "deck.gl"
import { StaticMap } from "react-map-gl";
import {JSONConverter} from '@deck.gl/json';
import {CSVLoader} from "@loaders.gl/csv";
import {registerLoaders} from "@loaders.gl/core";
import {
  MapView, 
  FirstPersonView, 
  OrthographicView, 
  OrbitView
} from '@deck.gl/core';

import * as layers from "@deck.gl/layers";
import * as aggregationLayers from "@deck.gl/aggregation-layers"
import * as geoLayers from "@deck.gl/geo-layers";
import * as meshLayers from "@deck.gl/mesh-layers";
import PropTypes from 'prop-types';


// Register CSV Loader and initialize json converter
registerLoaders(CSVLoader);
const configuration = {
  classes: Object.assign(
    {}, 
    layers, 
    aggregationLayers,
    geoLayers,
    meshLayers
  ),
}
const jsonConverter = new JSONConverter({ configuration });

// Those View classes will be dynamically called later
const viewObjs = {
  MapView, 
  FirstPersonView, 
  OrthographicView, 
  OrbitView
}

/**
 * ExampleComponent is an example component.
 * It takes a property, `label`, and
 * displays it.
 * It renders an input with the property `value`
 * which is editable by the user.
 */
export default class DeckGL extends React.Component {
    render() {
        let map;
        const {
            id, json, mapboxApiAccessToken
        } = this.props;

        // First, we need to convert the JSON representation into
        // the correct Deck.gl object.
        const deckProps = jsonConverter.convert(json);

        deckProps.id = id;
    
        // Only render the map and controller when the "views" key 
        // is in JSON
        if ("views" in json && json.views.length > 0){
          const {mapStyle} = json.views[0];
        
          // extract the view type, create View obj, add it to deckProps
          deckProps.views = json.views.map(view => {
            const viewType = view["@@type"];
            return new viewObjs[viewType](view);
          });
          
          map = <StaticMap 
            mapboxApiAccessToken={mapboxApiAccessToken}
            mapStyle={mapStyle}
          />;
        } else {
          map = null;
        }

        return (
            <Deck
                onClick={(clickInfo, clickEvent) => this.props.setProps({clickInfo, clickEvent})}
                {...deckProps}
            >
                {map}
            </Deck>
        );
    }
}

DeckGL.defaultProps = {
    json: {},
    mapboxApiAccessToken: null
};

DeckGL.propTypes = {
    /**
     * The JSON representation of your map. This can be generated by calling
     * pdk.Deck(...).to_json()
     */
    json: PropTypes.object,


    /**
     * The ID used to identify this component in Dash callbacks.
     */
    id: PropTypes.string,


    /**
     * `mapboxApiAccessToken` (text) = You will need a mapbox token to use deck.gl. Please create a mapbox
     * and follow the instructions here: https://docs.mapbox.com/help/how-mapbox-works/access-tokens/
     */
    mapboxApiAccessToken: PropTypes.string,


    /**
     * This prop is updated when an element in the map is clicked. This contains
     * the original gesture event (in JSON).
     */
    clickEvent: PropTypes.object,


    /**
     * This prop is updated when an element in the map is clicked. This contains
     * the picking info describing the object being clicked.
     * 
     * Complete description here:
     * https://deck.gl/docs/developer-guide/interactivity#the-picking-info-object
     */
    clickInfo: PropTypes.object,


    /**
     * This prop is updated when an element in the map is hovered. This contains
     * the original gesture event (in JSON).
     */
    hoverEvent: PropTypes.object,


    /**
     * This prop is updated when an element in the map is hovered. This contains
     * the picking info describing the object being hovered.
     * 
     * Complete description here:
     * https://deck.gl/docs/developer-guide/interactivity#the-picking-info-object
     */
    hoverInfo: PropTypes.object,

    /**
     * This prop is updated when the user starts dragging on the canvas. This contains
     * the original gesture event (in JSON).
     */
    dragStartEvent: PropTypes.object,


    /**
     * This prop is updated when the user starts dragging on the canvas. This contains
     * the picking info describing the object being dragged.
     * 
     * Complete description here:
     * https://deck.gl/docs/developer-guide/interactivity#the-picking-info-object
     */
    dragStartInfo: PropTypes.object,


    /**
     * This prop is updated when the user releases from dragging the canvas. This contains
     * the original gesture event (in JSON).
     */
    dragEndEvent: PropTypes.object,


    /**
     * This prop is updated when the user releases from dragging the canvas. This contains
     * the picking info describing the object being dragged.
     * 
     * Complete description here:
     * https://deck.gl/docs/developer-guide/interactivity#the-picking-info-object
     */
    dragEndInfo: PropTypes.object,


    /**
     * Dash-assigned callback that should be called to report property changes
     * to Dash, to make them available for callbacks.
     */
    setProps: PropTypes.func
};
